#!/bin/bash

# === Logging Setup ===
LOGFILE="$HOME/cloudbuild-setup.log"
touch "$LOGFILE"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [INFO] $*" | tee -a "$LOGFILE"
}

error() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] $*" | tee -a "$LOGFILE" >&2
}

check() {
    "$@"
    local status=$?
    if [ $status -ne 0 ]; then
        error "Command failed (exit code $status): $*"
    else
        log "‚úÖ Successfully ran: $*"
    fi
    return $status
}

trap 'error "Script error at line $LINENO: $BASH_COMMAND"' ERR

# === Start Script ===

log "üîê Authenticating with gcloud..."
check gcloud auth list

log "üåç Setting up environment variables..."
check export ZONE=$(gcloud compute project-info describe --format="value(commonInstanceMetadata.items[google-compute-default-zone])")
check export REGION=$(gcloud compute project-info describe --format="value(commonInstanceMetadata.items[google-compute-default-region])")
check export PROJECT_ID=$(gcloud config get-value project)
check export PROJECT_NUMBER=$(gcloud projects describe "$PROJECT_ID" --format='value(projectNumber)')
check gcloud config set compute/region "$REGION"

CB_P4SA="service-${PROJECT_NUMBER}@gcp-sa-cloudbuild.iam.gserviceaccount.com"

gcloud projects add-iam-policy-binding "$PROJECT_ID" \
  --member="serviceAccount:${CB_P4SA}" \
  --role="roles/secretmanager.admin"



log "üîß Enabling required services..."
check gcloud services enable container.googleapis.com cloudbuild.googleapis.com secretmanager.googleapis.com containeranalysis.googleapis.com
gcloud services enable secretmanager.googleapis.com

log "üì¶ Creating Artifact Registry..."
check gcloud artifacts repositories create my-repository --repository-format=docker --location="$REGION"

log "‚ò∏Ô∏è Creating GKE cluster..."
check gcloud container clusters create hello-cloudbuild --num-nodes 1 --region "$REGION"

log "‚¨áÔ∏è Installing GitHub CLI..."
check curl -sS https://webi.sh/gh | sh 
check gh auth login 

GITHUB_USERNAME=$(gh api user -q ".login")
check git config --global user.name "$GITHUB_USERNAME"
check git config --global user.email "${USER_EMAIL}"
log "‚úÖ GitHub authenticated as: $GITHUB_USERNAME"

log "üìÅ Creating GitHub repositories..."
check gh repo create hello-cloudbuild-app --private 
check gh repo create hello-cloudbuild-env --private

log "üìÅ Downloading sample app into hello-cloudbuild-app..."
mkdir -p ~/hello-cloudbuild-app
check gcloud storage cp -r gs://spls/gsp1077/gke-gitops-tutorial-cloudbuild/* ~/hello-cloudbuild-app

cd ~/hello-cloudbuild-app || exit 1

log "üîß Replacing region in YAML files..."
for f in cloudbuild.yaml cloudbuild-delivery.yaml cloudbuild-trigger-cd.yaml kubernetes.yaml.tpl; do
    check sed -i "s/us-central1/$REGION/g" "$f"
done

log "üì¶ Initializing git repo for app..."
check git init
check git config credential.helper gcloud.sh
check git remote add google https://github.com/${GITHUB_USERNAME}/hello-cloudbuild-app
check git branch -m master
check git add .
check git commit -m "initial commit"

COMMIT_ID="$(git rev-parse --short=7 HEAD)"
check gcloud builds submit --tag="${REGION}-docker.pkg.dev/${PROJECT_ID}/my-repository/hello-cloudbuild:${COMMIT_ID}" .

check git push google master

cd ~
mkdir -p workingdir
cd workingdir || exit 1

log "üîë Generating SSH key and storing in Secret Manager..."
check ssh-keygen -t rsa -b 4096 -N '' -f id_github -C "${USER_EMAIL}"
check gcloud secrets create ssh_key_secret --replication-policy="automatic"
check gcloud secrets versions add ssh_key_secret --data-file=id_github

GITHUB_TOKEN=$(gh auth token)
SSH_KEY_CONTENT=$(cat id_github.pub)

log "üîë Adding deploy key to GitHub repository..."
check gh api --method POST -H "Accept: application/vnd.github.v3+json" \
  /repos/${GITHUB_USERNAME}/hello-cloudbuild-env/keys \
  -f title="SSH_KEY" \
  -f key="$SSH_KEY_CONTENT" \
  -F read_only=false

rm -f id_github*

log "üîê Assigning IAM roles to GCP service accounts..."
check gcloud projects add-iam-policy-binding "$PROJECT_NUMBER" \
--member="serviceAccount:${PROJECT_NUMBER}-compute@developer.gserviceaccount.com" \
--role=roles/secretmanager.secretAccessor

check gcloud projects add-iam-policy-binding "$PROJECT_NUMBER" \
--member="serviceAccount:${PROJECT_NUMBER}@cloudbuild.gserviceaccount.com" \
--role=roles/container.developer

log "üìÅ Setting up hello-cloudbuild-env repo..."
mkdir -p ~/hello-cloudbuild-env
check gcloud storage cp -r gs://spls/gsp1077/gke-gitops-tutorial-cloudbuild/* ~/hello-cloudbuild-env

cd ~/hello-cloudbuild-env || exit 1

log "üîß Updating region in environment YAML files..."
for f in cloudbuild.yaml cloudbuild-delivery.yaml cloudbuild-trigger-cd.yaml kubernetes.yaml.tpl; do
    check sed -i "s/us-central1/$REGION/g" "$f"
done

check ssh-keyscan -t rsa github.com > known_hosts.github
chmod +x known_hosts.github

check git init
check git config credential.helper gcloud.sh
check git remote add google https://github.com/${GITHUB_USERNAME}/hello-cloudbuild-env
check git branch -m master
check git add .
check git commit -m "initial commit"
check git push google master

check git checkout -b production
rm -f cloudbuild.yaml

check wget https://raw.githubusercontent.com/Techcps/Google-Cloud-Skills-Boost/master/Google%20Kubernetes%20Engine%20Pipeline%20using%20Cloud%20Build/env-cloudbuild.yaml
check mv env-cloudbuild.yaml cloudbuild.yaml

check sed -i "s/REGION-/$REGION/g" cloudbuild.yaml
check sed -i "s/GITHUB-USERNAME/${GITHUB_USERNAME}/g" cloudbuild.yaml

check git add .
check git commit -m "Create cloudbuild.yaml for deployment"
check git checkout -b candidate
check git push google production
check git push google candidate

cd ~/hello-cloudbuild-app || exit 1
check ssh-keyscan -t rsa github.com > known_hosts.github
chmod +x known_hosts.github

check git add .
check git commit -m "Adding known_host file."
check git push google master

rm -f cloudbuild.yaml
check wget https://raw.githubusercontent.com/Techcps/Google-Cloud-Skills-Boost/master/Google%20Kubernetes%20Engine%20Pipeline%20using%20Cloud%20Build/app-cloudbuild.yaml
check mv app-cloudbuild.yaml cloudbuild.yaml

check sed -i "s/REGION/$REGION/g" cloudbuild.yaml
check sed -i "s/GITHUB-USERNAME/${GITHUB_USERNAME}/g" cloudbuild.yaml

check git add cloudbuild.yaml
check git commit -m "Trigger CD pipeline"
check git push google master

log "üîó Click this link to create a Cloud Build trigger:"
echo "https://console.cloud.google.com/cloud-build/triggers?project=$PROJECT_ID"

# Cloud Build Trigger setup
REPO_NAME="hello-cloudbuild-env"
CLOUD_BUILD_REPO="cloudbuild-env-repo"

REPO_NAME_APP="hello-cloudbuild-app"
CLOUD_BUILD_REPO_APP="cloudbuild-app-repo"



 gcloud builds connections create github cloud-build-connection \
  --project="${PROJECT_ID}" \
  --region="${REGION}" ||  "‚ö†Ô∏è Connection might already exist"


# Wait for user
read -p "üëâ After authorizing in browser, press [Enter] to continue..."

#  gcloud builds repositories create "${CLOUD_BUILD_REPO}" \
#   --remote-uri="https://github.com/${GITHUB_USERNAME}/${REPO_NAME}.git" \
#   --connection="cloud-build-connection" \
#   --region="${REGION}" ||  "‚ö†Ô∏è Repository might already exist"

#  gcloud builds triggers create github \
#   --name="hello-cloudbuild-deploy" \
#   --repository="projects/${PROJECT_ID}/locations/${REGION}/connections/cloud-build-connection/repositories/${CLOUD_BUILD_REPO}" \
#   --region="${REGION}" \
#   --branch-pattern="^candidate$" \
#   --build-config="cloudbuild.yaml" \
#   --service-account="projects/${PROJECT_ID}/serviceAccounts/${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"




# Function to create repo and trigger
create_repo_and_trigger() {
  local REPO_NAME=$1
  local CLOUD_BUILD_REPO=$2
  local TRIGGER_NAME=$3

  echo "Creating Cloud Build repository for $REPO_NAME..."
  gcloud builds repositories create "${CLOUD_BUILD_REPO}" \
    --remote-uri="https://github.com/${GITHUB_USERNAME}/${REPO_NAME}.git" \
    --connection="cloud-build-connection" \
    --region="${REGION}" || echo "‚ö†Ô∏è Repository $CLOUD_BUILD_REPO might already exist"

  echo "Creating Cloud Build trigger '$TRIGGER_NAME'..."
  gcloud builds triggers create github \
    --name="${TRIGGER_NAME}" \
    --repository="projects/${PROJECT_ID}/locations/${REGION}/connections/cloud-build-connection/repositories/${CLOUD_BUILD_REPO}" \
    --region="${REGION}" \
    --branch-pattern="^candidate$" \
    --build-config="cloudbuild.yaml" \
    --service-account="projects/${PROJECT_ID}/serviceAccounts/${PROJECT_NUMBER}-compute@developer.gserviceaccount.com" || echo "‚ö†Ô∏è Trigger $TRIGGER_NAME might already exist"
}

# Create for hello-cloudbuild-app
create_repo_and_trigger "$REPO_NAME_APP" "$CLOUD_BUILD_REPO_APP" "hello-cloudbuild-app-trigger"

# Create for hello-cloudbuild-env
create_repo_and_trigger "$REPO_NAME_ENV" "$CLOUD_BUILD_REPO_ENV" "hello-cloudbuild-env-trigger"
